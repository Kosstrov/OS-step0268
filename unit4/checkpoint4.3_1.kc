import "string"
#pragma link("mega65hyper.ld")

const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;
const char GREEN = 5;
const char RED = 2;

//char[] MESSAGE = "checkpoint 4.3 by step0268";
volatile unsigned char *current_screen_line;
volatile unsigned char current_screen_x;

void RESET(){
	current_screen_line = 0x0400;
	current_screen_x = 0;
	*VIC_MEMORY = 0x14;
	memset(SCREEN, ' ', 40*25);
	memset(COLS, 6, 40*25);
//	char* sc = SCREEN+2*40;
//	char* msg = MESSAGE;
	/*while(*msg){
		*sc++ = *msg++;
		}*/

	start_simple_program();
	exit_hypervisor();

/*	while(true) {
		if(*RASTER==50 || *RASTER==100) {
		*BGCOL = 1;
		} else {
		*BGCOL = 0;
		}
		}


while(true) continue;*/
}


void main(){
}

void reserved (){}

void start_simple_program(){
	*(unsigned char*)0x0300 = 0x80;
	*(unsigned char*)0x0301 = 0x00;
	*(unsigned char*)0x0302 = 0x81;
	*(unsigned char*)0x0303 = 0x00;
	*(unsigned char*)0x0304 = 0x00;
	*(unsigned char*)0x0305 = 0x00;
	*(unsigned char*)0x0306 = 0x00;
	*(unsigned char*)0x0307 = 0x60;
	*(unsigned char*)0x0308 = 0x02;
	*(unsigned char*)0x0309 = 0x00;
	*(unsigned char*)0x030a = 0x02;
	*(unsigned char*)0x030b = 0x01;
	*(unsigned char*)0x030c = 0x08;
	*(unsigned char*)0x030d = 0x00;
	*(unsigned char*)0x030e = 0x00;
	*(unsigned char*)0x030f = 0x00;
	*(unsigned char*)0xd701 = 0x03;
	*(unsigned char*)0xd702 = 0x00;
	*(unsigned char*)0xd705 = 0x00;
	*(unsigned short*)0xd648 = 0x080d;
	exit_hypervisor();
}

void print_newLine() {
	current_screen_line = current_screen_line +40;
	current_screen_x = 0;
}

void print_to_screen(char *message) {
	char* sc = current_screen_line + current_screen_x;
	while(*message){
		*sc++ = *message++;
		current_screen_x++;
		}
}

void syscall00() {
	print_to_screen("syscall00 entered");
	print_newLine();
	exit_hypervisor();
	}
void syscall01() {
	print_to_screen("syscall01 entered");
	print_newLine();
	exit_hypervisor();
	}
void syscall02() {exit_hypervisor();}
void syscall03() {exit_hypervisor();}
void syscall04() {exit_hypervisor();}
void syscall05() {exit_hypervisor();}
void syscall06() {exit_hypervisor();}
void syscall07() {exit_hypervisor();}
void syscall08() {exit_hypervisor();}
void syscall09() {exit_hypervisor();}
void syscall0A() {exit_hypervisor();}
void syscall0B() {exit_hypervisor();}
void syscall0C() {exit_hypervisor();}
void syscall0D() {exit_hypervisor();}
void syscall0E() {exit_hypervisor();}
void syscall0F() {exit_hypervisor();}
void syscall10() {exit_hypervisor();}
void securentr() {exit_hypervisor();}
void securexit() {exit_hypervisor();}
void syscall13() {exit_hypervisor();}
void syscall14() {exit_hypervisor();}
void syscall15() {exit_hypervisor();}
void syscall16() {exit_hypervisor();}
void syscall17() {exit_hypervisor();}
void syscall18() {exit_hypervisor();}
void syscall19() {exit_hypervisor();}
void syscall1A() {exit_hypervisor();}
void syscall1B() {exit_hypervisor();}
void syscall1C() {exit_hypervisor();}
void syscall1D() {exit_hypervisor();}
void syscall1E() {exit_hypervisor();}
void syscall1F() {exit_hypervisor();}
void syscall20() {exit_hypervisor();}
void syscall21() {exit_hypervisor();}
void syscall22() {exit_hypervisor();}
void syscall23() {exit_hypervisor();}
void syscall24() {exit_hypervisor();}
void syscall25() {exit_hypervisor();}
void syscall26() {exit_hypervisor();}
void syscall27() {exit_hypervisor();}
void syscall28() {exit_hypervisor();}
void syscall29() {exit_hypervisor();}
void syscall2A() {exit_hypervisor();}
void syscall2B() {exit_hypervisor();}
void syscall2C() {exit_hypervisor();}
void syscall2D() {exit_hypervisor();}
void syscall2E() {exit_hypervisor();}
void syscall2F() {exit_hypervisor();}
void syscall30() {exit_hypervisor();}
void syscall31() {exit_hypervisor();}
void syscall32() {exit_hypervisor();}
void syscall33() {exit_hypervisor();}
void syscall34() {exit_hypervisor();}
void syscall35() {exit_hypervisor();}
void syscall36() {exit_hypervisor();}
void syscall37() {exit_hypervisor();}
void syscall38() {exit_hypervisor();}
void syscall39() {exit_hypervisor();}
void syscall3A() {exit_hypervisor();}
void syscall3B() {exit_hypervisor();}
void syscall3C() {exit_hypervisor();}
void syscall3D() {exit_hypervisor();}
void syscall3E() {exit_hypervisor();}
void syscall3F() {exit_hypervisor();}
/*void pagfault() {*(SCREEN+14) = ')'; exit_hypervisor();}
void restorkey() {*(SCREEN+13) = ')'; exit_hypervisor();}
void alttabkey() {*(SCREEN+12) = ')'; exit_hypervisor();}
void vf011rd() {*(SCREEN+11) = ')'; exit_hypervisor();}
void vf011wr() {*(SCREEN+10) = ')'; exit_hypervisor();}*/

void pagfault() {}
void restorkey() {}
void alttabkey() {}
void vf011rd() {}
void vf011wr() {}
void cpukil(){}

#pragma data_seg(syscall)
struct SysCall{
char xjmp;
void()* syscall;
char xnop;
};
const char JMP = 0x4c;
const char NOP = 0xea;
export struct SysCall[] SYSCALLS = {
{ JMP, &syscall00, NOP},
{ JMP, &syscall01, NOP},
{ JMP, &syscall02, NOP},
{ JMP, &syscall03, NOP},
{ JMP, &syscall04, NOP},
{ JMP, &syscall05, NOP},
{ JMP, &syscall06, NOP},
{ JMP, &syscall07, NOP},
{ JMP, &syscall08, NOP},
{ JMP, &syscall09, NOP},
{ JMP, &syscall0A, NOP},
{ JMP, &syscall0B, NOP},
{ JMP, &syscall0C, NOP},
{ JMP, &syscall0D, NOP},
{ JMP, &syscall0E, NOP},
{ JMP, &syscall0F, NOP},
{ JMP, &syscall10, NOP},
{ JMP, &securentr, NOP},
{ JMP, &securexit, NOP},
{ JMP, &syscall13, NOP},
{ JMP, &syscall14, NOP},
{ JMP, &syscall15, NOP},
{ JMP, &syscall16, NOP},
{ JMP, &syscall17, NOP},
{ JMP, &syscall18, NOP},
{ JMP, &syscall19, NOP},
{ JMP, &syscall1A, NOP},
{ JMP, &syscall1B, NOP},
{ JMP, &syscall1C, NOP},
{ JMP, &syscall1D, NOP},
{ JMP, &syscall1E, NOP},
{ JMP, &syscall1F, NOP},
{ JMP, &syscall20, NOP},
{ JMP, &syscall21, NOP},
{ JMP, &syscall22, NOP},
{ JMP, &syscall23, NOP},
{ JMP, &syscall24, NOP},
{ JMP, &syscall25, NOP},
{ JMP, &syscall26, NOP},
{ JMP, &syscall27, NOP},
{ JMP, &syscall28, NOP},
{ JMP, &syscall29, NOP},
{ JMP, &syscall2A, NOP},
{ JMP, &syscall2B, NOP},
{ JMP, &syscall2C, NOP},
{ JMP, &syscall2D, NOP},
{ JMP, &syscall2E, NOP},
{ JMP, &syscall2F, NOP},
{ JMP, &syscall30, NOP},
{ JMP, &syscall31, NOP},
{ JMP, &syscall32, NOP},
{ JMP, &syscall33, NOP},
{ JMP, &syscall34, NOP},
{ JMP, &syscall35, NOP},
{ JMP, &syscall36, NOP},
{ JMP, &syscall37, NOP},
{ JMP, &syscall38, NOP},
{ JMP, &syscall39, NOP},
{ JMP, &syscall3A, NOP},
{ JMP, &syscall3B, NOP},
{ JMP, &syscall3C, NOP},
{ JMP, &syscall3D, NOP},
{ JMP, &syscall3E, NOP},
{ JMP, &syscall3F, NOP},
{ JMP, &pagfault, NOP},
{ JMP, &restorkey, NOP},
{ JMP, &alttabkey, NOP},
{ JMP, &vf011rd, NOP},
{ JMP, &vf011wr, NOP}
};
export align(0x100) struct SysCall[] TRAPS = {
{ JMP, &RESET, NOP },
{ JMP, &pagfault, NOP },
{ JMP, &restorkey, NOP },
{ JMP, &alttabkey, NOP },
{ JMP, &vf011rd, NOP },
{ JMP, &vf011wr, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &reserved, NOP },
{ JMP, &cpukil, NOP }
};

void exit_hypervisor()

{
*(unsigned char*)$D67F = $01;
}